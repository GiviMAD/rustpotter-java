// Automatically generated by flapigen
package io.github.givimad.rustpotter_java;


public final class RustpotterJava {

    public RustpotterJava() {
        mNativeObj = init();
    }
    private static native long init();

    public final void addModel(String path) {
        do_addModel(mNativeObj, path);
    }
    private static native void do_addModel(long self, String path);

    public final java.util.Optional<RustpotterDetection> processPCMSigned(short [] buffer) {
        long ret = do_processPCMSigned(mNativeObj, buffer);
        java.util.Optional<RustpotterDetection> convRet;
        if (ret != 0) {
            convRet = java.util.Optional.of(new RustpotterDetection(InternalPointerMarker.RAW_PTR, ret));
        } else {
            convRet = java.util.Optional.empty();
        }

        return convRet;
    }
    private static native long do_processPCMSigned(long self, short [] buffer);

    public final long getFrameSize() {
        long ret = do_getFrameSize(mNativeObj);

        return ret;
    }
    private static native long do_getFrameSize(long self);

    public synchronized void delete() {
        if (mNativeObj != 0) {
            do_delete(mNativeObj);
            mNativeObj = 0;
       }
    }
    @Override
    protected void finalize() throws Throwable {
        try {
            delete();
        }
        finally {
             super.finalize();
        }
    }
    private static native void do_delete(long me);
    /*package*/ RustpotterJava(InternalPointerMarker marker, long ptr) {
        assert marker == InternalPointerMarker.RAW_PTR;
        this.mNativeObj = ptr;
    }
    /*package*/ long mNativeObj;

    public static void loadLibrary() {
        try {
            String osName = System.getProperty("os.name").toLowerCase();
            String osArch = System.getProperty("os.arch").toLowerCase();
            if (osName.contains("win")) {
                if(osArch.contains("amd64") || osArch.contains("x86_64")) {
                    NativeUtils.loadLibraryFromJar("/librustpotter_java_win_x86_64.dll");
                    return;
                }
            } else if (osName.contains("nix") || osName.contains("nux")
                    || osName.contains("aix")) {
                if(osArch.contains("amd64") || osArch.contains("x86_64")) {
                    NativeUtils.loadLibraryFromJar("/librustpotter_java_debian_x86_64.so");
                    return;
                } else if(osArch.contains("aarch64") || osArch.contains("arm64")) {
                    NativeUtils.loadLibraryFromJar("/librustpotter_java_debian_aarch64.so");
                    return;
                } else if(osArch.contains("armv7") || osArch.contains("arm")) {
                    NativeUtils.loadLibraryFromJar("/librustpotter_java_debian_armv7l.so");
                    return;
                }
            } else if (osName.contains("mac") || osName.contains("darwin")) {
                if(osArch.contains("amd64") || osArch.contains("x86_64")) {
                    NativeUtils.loadLibraryFromJar("/librustpotter_java_macos_x86_64.dylib");
                    return;
                } else if(osArch.contains("aarch64") || osArch.contains("arm64")) {
                    NativeUtils.loadLibraryFromJar("/librustpotter_java_macos_aarch64.dylib");
                    return;
                }
            }
            throw new java.io.IOException("Rustpotter: Unsupported platform.");
        } catch (java.io.IOException e) {
            e.printStackTrace();
        }
    }
}
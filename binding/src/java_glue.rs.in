// src/java_glue.rs.in
use crate::jni_c_header::*;
use rustpotter::{
    DetectedWakeword, Endianness, NoiseDetectionMode, SampleFormat, VadMode, WakewordDetector,
    WakewordDetectorBuilder,
};
pub struct RustpotterDetection {
    name: String,
    score: f32,
}
#[allow(non_snake_case)]
impl RustpotterDetection {
    pub fn new(name: String, score: f32) -> Self {
        Self { name, score }
    }
    pub fn getName(&self) -> String {
        self.name.clone()
    }
    pub fn getScore(&self) -> f32 {
        self.score
    }
}
pub struct RustpotterJavaBuilder {
    builder: WakewordDetectorBuilder,
}
#[allow(non_snake_case)]
impl RustpotterJavaBuilder {
    pub fn new() -> Self {
        Self {
            builder: WakewordDetectorBuilder::new(),
        }
    }
    pub fn setThreshold(&mut self, value: f32) {
        self.builder.set_threshold(value);
    }
    pub fn setAveragedThreshold(&mut self, value: f32) {
        self.builder.set_averaged_threshold(value);
    }
    pub fn setBitsPerSample(&mut self, value: u16) {
        self.builder.set_bits_per_sample(value);
    }
    pub fn setSampleRate(&mut self, value: usize) {
        self.builder.set_sample_rate(value);
    }
    pub fn setSampleFormat(&mut self, value: SampleFormat) {
        self.builder.set_sample_format(value);
    }
    pub fn setChannels(&mut self, value: u16) {
        self.builder.set_channels(value);
    }
    pub fn setEndianness(&mut self, value: Endianness) {
        self.builder.set_endianness(value);
    }
    pub fn setComparatorBandSize(&mut self, value: usize) {
        self.builder.set_comparator_band_size(value);
    }
    pub fn setComparatorRef(&mut self, value: f32) {
        self.builder.set_comparator_ref(value);
    }
    pub fn setEagerMode(&mut self, value: bool) {
        self.builder.set_eager_mode(value);
    }
    pub fn setSingleThread(&mut self, value: bool) {
        self.builder.set_single_thread(value);
    }
    pub fn setNoiseSensitivity(&mut self, value: f32) {
        self.builder.set_noise_sensitivity(value);
    }
    pub fn setNoiseMode(&mut self, value: NoiseDetectionMode) {
        self.builder.set_noise_mode(value);
    }
    pub fn setVADDelay(&mut self, value: u16) {
        self.builder.set_vad_delay(value);
    }
    pub fn setVADSensitivity(&mut self, value: f32) {
        self.builder.set_vad_sensitivity(value);
    }
    pub fn setVADMode(&mut self, value: VadMode) {
        self.builder.set_vad_mode(value);
    }
    pub fn build(&self) -> RustpotterJava {
        RustpotterJava::new(&self.builder)
    }
}

pub struct RustpotterJava {
    detector: WakewordDetector,
}
#[allow(non_snake_case)]
impl RustpotterJava {
    pub fn new(builder: &WakewordDetectorBuilder) -> Self {
        Self {
            detector: builder.build(),
        }
    }
    pub fn addWakewordModelFile(&mut self, path: String) -> Result<String, String> {
        self.detector
            .add_wakeword_from_model_file(path, true)
            .map_err(|err| err.to_string())
    }
    pub fn addWakewordModelBytes(&mut self, bytes: &[u8]) -> Result<String, String> {
        self.detector
            .add_wakeword_from_model_bytes(bytes.to_vec(), true)
            .map_err(|err| err.to_string())
    }
    pub fn process(&mut self, buffer: &[i32]) -> Option<RustpotterDetection> {
        self.detector.process(buffer).map(transform_detection)
    }
    pub fn processBuffer(&mut self, buffer: &[u8]) -> Option<RustpotterDetection> {
        self.detector.process_buffer(buffer).map(transform_detection)
    }
    pub fn processInt(&mut self, buffer: &[i32]) -> Option<RustpotterDetection> {
        self.detector.process_i32(buffer).map(transform_detection)
    }
    pub fn processSort(&mut self, buffer: &[i16]) -> Option<RustpotterDetection> {
        self.detector.process_i16(buffer).map(transform_detection)
    }
    pub fn processByte(&mut self, buffer: &[i8]) -> Option<RustpotterDetection> {
        self.detector.process_i8(buffer).map(transform_detection)
    }
    pub fn processFloat(&mut self, buffer: &[f32]) -> Option<RustpotterDetection> {
        self.detector.process_f32(buffer).map(transform_detection)
    }
    pub fn getSamplesPerFrame(&self) -> usize {
        self.detector.get_samples_per_frame()
    }
    pub fn getBytesPerFrame(&self) -> usize {
        self.detector.get_bytes_per_frame()
    }
    pub fn removeWakeword(&mut self, name: &str) {
        self.detector.remove_wakeword(name);
    }
    pub fn setThreshold(&mut self, threshold: f32) {
        self.detector.set_threshold(threshold);
    }
    pub fn setAveragedThreshold(&mut self, averaged_threshold: f32) {
        self.detector.set_averaged_threshold(averaged_threshold);
    }
    pub fn setWakewordThreshold(&mut self, name: &str, threshold: f32) {
        self.detector.set_wakeword_threshold(name, threshold);
    }
    pub fn setWakewordAveragedThreshold(&mut self, name: &str, averaged_threshold: f32) {
        self.detector
            .set_wakeword_averaged_threshold(name, averaged_threshold);
    }
}

fn transform_detection(detection: DetectedWakeword) -> RustpotterDetection {
    RustpotterDetection::new(detection.wakeword.clone(), detection.score)
}

foreign_typemap!(
    ($p:r_type) Vec<u8> => jbyteArray {
        let slice = &($p)[..];
        let slice = unsafe { std::mem::transmute::<&[u8], &[i8]>(slice) };
        let raw = JavaByteArray::from_slice_to_raw(slice, env);
        $out = raw;
    };
    ($p:f_type) => "jbyteArray";
);

foreign_typemap!(
    ($p:r_type) &'a [u8] => jbyteArray {
        let slice = unsafe { std::mem::transmute::<&[u8], &[i8]>($p) };
        let raw = JavaByteArray::from_slice_to_raw(slice, env);
        $out = raw;
    };
    ($p:f_type) => "jbyteArray";
    ($p:r_type) &'a [u8] <= jbyteArray {
        let arr = JavaByteArray::new(env, $p);
        let slice = arr.to_slice();
        let slice = unsafe { std::mem::transmute::<&[i8], &[u8]>(slice) };
        $out = slice;
    };
    ($p:f_type) <= "jbyteArray";
);
foreign_enum!(
    /// Allowed vad modes.
    enum VadMode {
        QUALITY = VadMode::Quality,
        LOW_BITRATE = VadMode::LowBitrate,
        AGGRESSIVE = VadMode::Aggressive,
        VERY_AGGRESSIVE = VadMode::VeryAggressive,
    }
);
foreign_enum!(
    /// Supported endianness modes.
    enum Endianness {
        LITTLE = Endianness::Little,
        BIG = Endianness::Big,
        NATIVE = Endianness::Native,
    }
);
foreign_enum!(
    /// Dificulty for considering a frame as noise.
    enum NoiseDetectionMode {
        EASIEST = NoiseDetectionMode::Easiest,
        EASY = NoiseDetectionMode::Easy,
        NORMAL = NoiseDetectionMode::Normal,
        HARD = NoiseDetectionMode::Hard,
        HARDEST = NoiseDetectionMode::Hardest,
    }
);
foreign_enum!(
    /// Allowed wav sample formats.
    enum SampleFormat {
        INT = SampleFormat::Int,
        FLOAT = SampleFormat::Float,
    }
);
foreign_class!(
    /// Represents a successful wakeword detection.
    class RustpotterDetection {
        self_type RustpotterDetection;
        private constructor = empty;
        /// Get detected wakeword name
        fn RustpotterDetection::getName(&self) -> String;
        /// Get detected wakeword score
        fn RustpotterDetection::getScore(&self) -> f32;
    }
);

foreign_class!(
    /// Use this class to configure and build your wakeword detector.
    class RustpotterJavaBuilder {
        self_type RustpotterJavaBuilder;
        constructor RustpotterJavaBuilder::new() -> RustpotterJavaBuilder;
        /// Configures the detector threshold,
        /// is the min score (in range 0. to 1.) that some of
        /// the wakeword templates should obtain to trigger a detection.
        ///
        /// Defaults to 0.5, wakeword defined value takes prevalence if present.
        fn RustpotterJavaBuilder::setThreshold(&mut self, value: f32);
        /// Configures the detector threshold,
        /// is the min score (in range 0. to 1.) that
        /// the averaged wakeword template should obtain to allow
        /// to continue with the detection. This way it can prevent to
        /// run the comparison of the current frame against each of the wakeword templates.
        /// If set to 0. this functionality is disabled.
        ///
        /// Defaults to half of the configured threshold, wakeword defined value takes prevalence if present.
        fn RustpotterJavaBuilder::setAveragedThreshold(&mut self, value: f32);
        /// Configures the detector expected bit per sample for the audio chunks to process.
        ///
        /// When sample format is set to 'float' this is ignored as only 32 is supported.
        /// 
        /// Defaults to 16; Allowed values: 8, 16, 24, 32
        fn RustpotterJavaBuilder::setBitsPerSample(&mut self, value: u16);
        /// Configures the detector expected sample rate for the audio chunks to process.
        ///
        /// Defaults to 48000
        fn RustpotterJavaBuilder::setSampleRate(&mut self, value: usize);
        /// Configures the detector expected sample format for the audio chunks to process.
        ///
        /// Defaults to int
        fn RustpotterJavaBuilder::setSampleFormat(&mut self, value: SampleFormat);
        /// Configures the detector expected number of channels for the audio chunks to process.
        /// Rustpotter will only use data for first channel.
        ///
        /// Defaults to 1
        fn RustpotterJavaBuilder::setChannels(&mut self, value: u16);
        /// Configures expected endianness used by the 'processBuffer' method.
        ///
        /// Defaults to little-endian
        fn RustpotterJavaBuilder::setEndianness(&mut self, value: Endianness);
        /// Configures the band-size for the comparator used to match the samples.
        ///
        /// Defaults to 6
        fn RustpotterJavaBuilder::setComparatorBandSize(&mut self, value: usize);
        /// Configures the reference for the comparator used to match the samples.
        ///
        /// Defaults to 0.22
        fn RustpotterJavaBuilder::setComparatorRef(&mut self, value: f32);
        /// Enables eager mode.
        /// End detection as soon as a result is over the score, instead of
        /// waiting to see if the next frame has a higher score.
        ///
        /// Recommended for real usage.
        ///
        /// Defaults to false.
        fn RustpotterJavaBuilder::setEagerMode(&mut self, value: bool);
        /// Unless enabled the comparison against multiple wakewords run
        /// in separate threads.
        ///
        /// Defaults to false.
        ///
        /// Only applies when more than a wakeword is loaded.
        fn RustpotterJavaBuilder::setSingleThread(&mut self, value: bool);
        /// Noise/silence ratio in the last second to consider voice is detected.
        ///
        /// Defaults to 0.5.
        ///
        /// Only applies if noise mode is set.
        fn RustpotterJavaBuilder::setNoiseSensitivity(&mut self, value: f32);
        /// Use build-in noise detection to reduce computation on absence of noise.
        ///
        /// Configures how difficult is to considering a frame as noise (the required noise level).
        ///
        /// Unless specified the noise detection is disabled.
        fn RustpotterJavaBuilder::setNoiseMode(&mut self, value: NoiseDetectionMode);
        /// Seconds to disable the vad detector after voice is detected.
        ///
        /// Defaults to 3.
        ///
        /// Only applies if vad is enabled.
        fn RustpotterJavaBuilder::setVADDelay(&mut self, value: u16);
        /// Voice/silence ratio in the last second to consider voice is detected.
        ///
        /// Defaults to 0.5.
        ///
        /// Only applies if vad is enabled.
        fn RustpotterJavaBuilder::setVADSensitivity(&mut self, value: f32);
        /// Use a vad detector to reduce computation on absence of voice sound.
        ///
        /// Unless specified the vad detector is disabled.
        fn RustpotterJavaBuilder::setVADMode(&mut self, value: VadMode);
        /// construct the wakeword detector
        fn RustpotterJavaBuilder::build(&self) -> RustpotterJava;

    }
);
foreign_class!(
    /// This class manages the wakeword generation and the spotting functionality.
    class RustpotterJava {
        self_type RustpotterJava;
        private constructor = empty;
        /// Process i32 audio chunks.
        ///
        /// Asserts that the audio chunk length should match the return
        /// of the getSamplesPerFrame method.
        ///
        /// Assumes sample rate match the configured for the detector.
        ///
        /// Asserts that detector bits_per_sample is one of: 8, 16, 24, 32.
        ///
        /// Asserts that detector sample_format is 'int'.
        ///
        /// It's an alias for the processInt method.
        fn RustpotterJava::process(&mut self, buffer: &[i32]) -> Option<RustpotterDetection>;
        /// Process i32 audio chunks.
        ///
        /// Asserts that the audio chunk length should match the return
        /// of the getSamplesPerFrame method.
        ///
        /// Assumes sample rate match the configured for the detector.
        ///
        /// Asserts that detector bits_per_sample is one of: 8, 16, 24, 32.
        ///
        /// Asserts that detector sample_format is 'int'.
        fn RustpotterJava::processInt(&mut self, buffer: &[i32]) -> Option<RustpotterDetection>;
        /// Process i16 audio chunks.
        ///
        /// Asserts that the audio chunk length should match the return
        /// of the getSamplesPerFrame method.
        ///
        /// Assumes sample rate match the configured for the detector.
        ///
        /// Asserts that detector bits_per_sample is one of: 8, 16.
        ///
        /// Asserts that detector sample_format is 'int'.
        fn RustpotterJava::processSort(&mut self, buffer: &[i16]) -> Option<RustpotterDetection>;
        /// Process i8 audio chunks.
        ///
        /// Asserts that the audio chunk length should match the return
        /// of the getSamplesPerFrame method.
        ///
        /// Assumes sample rate match the configured for the detector.
        ///
        /// Asserts that detector bits_per_sample is 8.
        ///
        /// Asserts that detector sample_format is 'int'.
        fn RustpotterJava::processByte(&mut self, buffer: &[i8]) -> Option<RustpotterDetection>;
        /// Process f32 audio chunks.
        ///
        /// Asserts that the audio chunk length should match the return
        /// of the getSamplesPerFrame method.
        ///
        /// Assumes sample rate match the configured for the detector.
        ///
        /// Asserts that detector bits_per_sample is 32.
        ///
        /// Asserts that detector sample_format is 'float'.
        fn RustpotterJava::processFloat(&mut self, buffer: &[f32]) -> Option<RustpotterDetection>;
        /// Process audio chunks in bytes.
        ///
        /// Asserts that the audio chunk length should match the return
        /// of the getBytesPerFrame method.
        ///
        /// Assumes sample rate match the configured for the detector.
        ///
        /// Assumes buffer endianness matches the configured for the detector.
        fn RustpotterJava::processBuffer(&mut self, buffer: &[u8]) -> Option<RustpotterDetection>;
        /// Loads a wakeword from its model path.
        fn RustpotterJava::addWakewordModelFile(&mut self, path: String) -> Result<String, String>;
        /// Loads a wakeword from its model bytes.
        fn RustpotterJava::addWakewordModelBytes(&mut self, bytes: &[u8]) -> Result<String, String>;
        /// Returns the desired chunk size.
        fn RustpotterJava::getSamplesPerFrame(&self) -> usize;
        /// Returns size in bytes for the desired chunk.
        fn RustpotterJava::getBytesPerFrame(&self) -> usize;
        /// Removes a wakeword by name.
        fn RustpotterJava::removeWakeword(&mut self, name: &str);
        /// Sets detector threshold.
        fn RustpotterJava::setThreshold(&mut self, threshold: f32);
        /// Sets detector averaged threshold.
        fn RustpotterJava::setAveragedThreshold(&mut self, averaged_threshold: f32);
        /// Sets wakeword threshold.
        fn RustpotterJava::setWakewordThreshold(&mut self, name: &str, threshold: f32);
        /// Sets wakeword averaged threshold.
        fn RustpotterJava::setWakewordAveragedThreshold(&mut self, name: &str, averaged_threshold: f32);
        foreign_code r#"
        public static void loadLibrary() throws java.io.IOException {
            String bundleLibraryPath = null;
            String osName = System.getProperty("os.name").toLowerCase();
            String osArch = System.getProperty("os.arch").toLowerCase();
            if (osName.contains("win")) {
                if(osArch.contains("amd64") || osArch.contains("x86_64")) {
                    bundleLibraryPath = "/librustpotter_java_win_x86_64.dll";
                }
            } else if (osName.contains("nix") || osName.contains("nux")
                    || osName.contains("aix")) {
                if(osArch.contains("amd64") || osArch.contains("x86_64")) {
                    bundleLibraryPath = "/librustpotter_java_debian_x86_64.so";
                } else if(osArch.contains("aarch64") || osArch.contains("arm64")) {
                    bundleLibraryPath = "/librustpotter_java_debian_aarch64.so";
                } else if(osArch.contains("armv7") || osArch.contains("arm")) {
                    bundleLibraryPath = "/librustpotter_java_debian_armv7l.so";
                }
            } else if (osName.contains("mac") || osName.contains("darwin")) {
                if(osArch.contains("amd64") || osArch.contains("x86_64")) {
                    bundleLibraryPath = "/librustpotter_java_macos_x86_64.dylib";
                } else if(osArch.contains("aarch64") || osArch.contains("arm64")) {
                    bundleLibraryPath = "/librustpotter_java_macos_aarch64.dylib";
                }
            }
            if (bundleLibraryPath == null) {
                throw new java.io.IOException("Rustpotter: Unsupported platform.");
            }
            NativeUtils.loadLibraryFromJar(bundleLibraryPath);
        }
    "#;
    }
);
